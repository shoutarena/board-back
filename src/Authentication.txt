Basic Authentication
    - 사용자 이름 / 비밀번호를 Base64로 인코딩 하여 Authorization 헤더에 포함하여 전송됨
    - 매주 안전하지 않음, SSL / TLS와 함께 사용됨
    Authorization : Basic ~~~~~

Bearer Token Authentication -> 사용할것
    - 헤더에 토큰을 포함하여 전송 Authorization 헤더에 포함하여 전송
    - JWT 를 사용하여 인증
        - Json Web Token : Claim 이라고 불리는 정보를 JSON 형태로 안전하게 전송하기 위한 토큰 기반의 표준
        - 인증과 정보 교환에 사용, 서명이 되어 있어서 신뢰성 확보 가능
        - Header : 토큰의 타입과 사용된 알고리즘 정보를 담고있음,  Base64Url로 인코딩
        - Payload : Claim 정보, 대상, 발행자, 만료 시간 등 다양한 정보가 포함됨, Base64Url로 인코딩
        - Signature : Header와 Payload, Secret Key를 사용하여 생성된 서명
        - jwt.io
    - 장점 : 상태를 유지하지 않는다(Stateless), 간단하고 자기 포함적, 간단한 방식, 확장성이 높음
    - 단점 : 클레임이 많을 수록 토큰의 크기가 커짐, 서명은 되어있지만 암호화는 되어있지 않음 중요한 정보를 JWT에 포함하면 안됨,
            토큰 노출 위험, 토큰 관리(만료시간, 갱신)
    Authorization : Bearer ~~~~

OAuth
    - 토큰기반 인증 방식, 사용자가 직접 자격을 증명 X 미리 인증 받아서 토큰을 발급 받고 이 토큰을 이용하여 API를 요청하는 방식 OAuth 2.0
    - Kakao / Naver / Git/ Facebook /Google

API Key / Session Base Authentication 인증 등
